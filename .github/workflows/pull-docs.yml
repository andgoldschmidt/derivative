name: Docs

on: [pull_request]

jobs:
  docs:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.11" ]
        poetry-version: [ "1.8.3" ]
    steps:
      # ======
      # Checkout, set up python
      # ======
      - name: Check out
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      # ======
      # Install and configure poetry from cache
      # ======
      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v4
        with:
          path: ~/.local  # the path depends on the OS
          key: poetry-${{ matrix.poetry-version }}
      - name: Install poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          version: ${{ matrix.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      # ======
      # Load cached venv if cache exists
      # Install dependencies if cache does not exist
      # ======
      - name: Load cached venv
        id: cached-poetry-dependencies-docs
        uses: actions/cache@v4
        with:
          path: .venv
          key: docs-${{ matrix.python-version }}-${{ matrix.poetry-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction -E docs
      # ======
      # Install Pandoc
      # ======
      - name: Use pandoc (external to Poetry)
        uses: nikeee/setup-pandoc@v1
#        uses: docker://pandoc/latex:2.9
      - run: pip install pandoc
      # ======
      # Run test suite
      # ======
      - name: Make docs
        run: poetry run sphinx-build docs docs/_build
